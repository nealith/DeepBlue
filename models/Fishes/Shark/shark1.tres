[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://models/Fishes/Shark/albedo_body.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]

code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

uniform float z_torsion_value;
uniform float z_torsion_frequency;

uniform float z_wave_value;
uniform float z_wave_frequency;

uniform float frequency;

// axis angle pitch, yaw, roll
uniform float yaw_value;
uniform float pitch_value;
uniform float roll_value;

// x,y,z translations
uniform vec3 translations;

// Colors and texture maps
uniform vec4 albedo : hint_color;

uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);

uniform sampler2D albedo_map : hint_albedo;

uniform sampler2D metallic_map : hint_white;
uniform vec4 metallic_texture_channel;

uniform sampler2D roughness_map : hint_white;
uniform vec4 roughness_texture_channel;

uniform sampler2D normal_map : hint_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

void vertex()
{
	float time_sin = sin( TIME * frequency );
	
	vec3 new_pos = VERTEX;
	vec3 tmp = VERTEX;
	
	// Z torsion
	float z_torsion = sin( VERTEX.z + TIME * z_torsion_frequency ) * z_torsion_value;
	float torsion_cos = cos( z_torsion );
	float torsion_sin = sin( z_torsion );
	tmp.x = new_pos.x * torsion_cos - new_pos.y * torsion_sin;
	tmp.y = new_pos.x * torsion_sin + new_pos.y * torsion_cos;
	new_pos = tmp;
	
	// Z waviness
	float z_wave = sin( VERTEX.z - TIME * z_wave_frequency ) * z_wave_value;
	new_pos.x += z_wave;
	
	// yaw
	float yaw_a = time_sin * yaw_value;
	float yaw_cos = cos( yaw_a );
	float yaw_sin = sin( yaw_a );
	
	// pitch
	float pitch_a = time_sin * pitch_value;
	float pitch_cos = cos( pitch_a );
	float pitch_sin = sin( pitch_a );
	
	// roll
	float roll_a = time_sin * roll_value;
	float roll_cos = cos( roll_a);
	float roll_sin = sin( roll_a);

	// yaw pitch roll 
	tmp.x = yaw_cos * roll_cos * new_pos.x - yaw_cos * roll_sin * new_pos.y + yaw_sin * new_pos.z;
	tmp.y = (pitch_sin * yaw_sin * roll_cos + pitch_cos * roll_sin) * new_pos.x + (-pitch_sin * yaw_sin * roll_sin + pitch_cos * roll_cos) * new_pos.y - pitch_sin * yaw_cos * new_pos.z;
	tmp.z = (-pitch_cos * yaw_sin * roll_cos + pitch_sin * roll_sin) * new_pos.x + (pitch_cos * yaw_sin * roll_sin + pitch_sin * roll_cos) * new_pos.y + pitch_cos * yaw_cos * new_pos.z;
	
	new_pos = tmp;
	
	// translation
	new_pos += translations * time_sin;

	VERTEX = new_pos;
	
	// UV
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment()
{
	vec4 albedo_tex = texture(albedo_map,UV);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	NORMALMAP = texture(normal_map,UV).rgb;
	float metallic_tex = dot(texture(metallic_map,UV),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(roughness_map,UV),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}"

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/z_torsion_value = 0.2
shader_param/z_torsion_frequency = -5
shader_param/z_wave_value = 0.0
shader_param/z_wave_frequency = 5
shader_param/frequency = 5
shader_param/yaw_value = 0.1
shader_param/pitch_value = 0.1
shader_param/roll_value = 0
shader_param/translations = Vector3( 0.1, 0.1, 0 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.5
shader_param/roughness = 0.5
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 0, 0, 1, 0 )
shader_param/roughness_texture_channel = Plane( 0, 1, 0, 0 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/albedo_map = ExtResource( 1 )
_sections_unfolded = [ "shader_param" ]

