[gd_scene load_steps=15 format=2]

[ext_resource path="res://cockpit/SonarCamera.gd" type="Script" id=1]
[ext_resource path="res://cockpit/sonar_bg.jpg" type="Texture" id=2]
[ext_resource path="res://cockpit/linebalayage.png" type="Texture" id=3]
[ext_resource path="res://cockpit/TextureRect.gd" type="Script" id=4]
[ext_resource path="res://cockpit/array.png" type="Texture" id=5]

[sub_resource type="Environment" id=1]

ambient_light_color = Color( 1, 1, 1, 1 )

[sub_resource type="Shader" id=2]

code = "shader_type canvas_item;

varying vec2 uv_cercle;
uniform sampler2D bg;

uniform sampler2D top;
uniform sampler2D bottom;

uniform sampler2D green_line;
varying vec2 uv_line;
uniform float rotation_degrees = 1.11;

void vertex(){
	uv_cercle = VERTEX;
	uv_line = UV;
}

void fragment() {
	vec2 uv_value = UV;
	float s = sin( rotation_degrees*TIME);
	float c = cos( rotation_degrees*TIME);
	mat2 rotation_matrix = mat2(vec2(c,-s), vec2(s,c));
	uv_value = (uv_value -0.5) * rotation_matrix + 0.5;
	
	
    vec4 color = vec4(0,0,0,1);
	vec4 color2 = vec4(0,0,0,1);
	vec4 color3 = vec4(0,0,0,1);
	vec2 size = vec2(1000,1000);
	
	vec4 line_color = texture(green_line,uv_value);
	
	float distance = length(size/2.0-uv_cercle);
	if (distance <= 400.0){
		//color = texture(TEXTURE,UV);
		color2 = texture(top,UV);
		color3 = texture(bottom,UV);
		//float grey_level = (color.r + color.g + color.b)/3.0;
		//float binary = round(grey_level);
		float grey_level2 = (color2.r + color2.g + color2.b)/3.0;
		float binary2 = round(grey_level2);
		float grey_level3 = (color3.r + color3.g + color3.b)/3.0;
		float binary3 = round(grey_level3);
		color.r = 0.0 + binary2*0.1;
		color.g = (binary2*1.0 + binary3*0.5) * max(line_color.g,0.2);
		color.b = 0.0 + binary3*0.1;
		color.a = 1.0;
	}
	
	COLOR = line_color*0.8 + color + texture(bg,UV);
}"

[sub_resource type="ViewportTexture" id=3]

viewport_path = NodePath("BottomView")

[sub_resource type="ViewportTexture" id=4]

viewport_path = NodePath("TopView")

[sub_resource type="ShaderMaterial" id=5]

shader = SubResource( 2 )
shader_param/rotation_degrees = 1.105
shader_param/bg = ExtResource( 2 )
shader_param/top = SubResource( 4 )
shader_param/bottom = SubResource( 3 )
shader_param/green_line = ExtResource( 3 )

[sub_resource type="ViewportTexture" id=6]

viewport_path = NodePath("TopView")

[sub_resource type="Shader" id=7]

code = "shader_type canvas_item;

uniform sampler2D data;
uniform int slide;

void fragment() {
    vec4 color = vec4(0,0,0,1);
	
	vec2 uv = UV;
	uv.x += float(slide)/1000.0;
	if (uv.x > 1.0){
		uv.x-=1.0;
	}
	uv.y = 0.0;
	
	vec4 data_value = texture(data,uv);
	
	if ((1.0-UV.y) > data_value.r){
		color.g = 0.0;
	} else {
		color.g = 1.0;
	}
	
	//color.r = UV.y;
	
	COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id=8]

shader = SubResource( 7 )
shader_param/slide = null

[sub_resource type="ImageTexture" id=9]

lossy_quality = 0.0

[node name="Viewports" type="Spatial"]

[node name="TopView" type="Viewport" parent="."]
size = Vector2( 1000, 1000 )
hdr = false
render_target_update_mode = 3

[node name="Yaw" type="Spatial" parent="TopView"]
script = ExtResource( 1 )

[node name="camera" type="InterpolatedCamera" parent="TopView/Yaw"]
transform = Transform( -1, 5.77123e-09, -1.12515e-10, 1.14508e-10, 0.000345306, -1, -5.77117e-09, -1, -0.000345306, 0, -10, 0 )
cull_mask = 262144
environment = SubResource( 1 )
projection = 1
current = true
size = 80.0
target = NodePath("../..")

[node name="BottomView" type="Viewport" parent="."]
size = Vector2( 1000, 1000 )
hdr = false
render_target_v_flip = true
render_target_update_mode = 3

[node name="Yaw" type="Spatial" parent="BottomView"]
script = ExtResource( 1 )

[node name="camera" type="InterpolatedCamera" parent="BottomView/Yaw"]
transform = Transform( -1, 3.25841e-07, 0, -1.12515e-10, -0.000345306, 1, 3.25841e-07, 1, 0.000345306, 0, 10, 0 )
cull_mask = 262144
environment = SubResource( 1 )
projection = 1
current = true
size = 80.0
target = NodePath("../..")

[node name="SonarActif" type="Viewport" parent="."]
size = Vector2( 1000, 1000 )

[node name="TextureRect" type="TextureRect" parent="SonarActif"]
material = SubResource( 5 )
rect_clip_content = true
texture = SubResource( 6 )

[node name="SonarPassif" type="Viewport" parent="."]
size = Vector2( 1000, 1000 )

[node name="TextureRect" type="TextureRect" parent="SonarPassif"]
material = SubResource( 8 )
rect_clip_content = true
texture = SubResource( 6 )
script = ExtResource( 4 )
useless = ExtResource( 5 )
data = SubResource( 9 )

