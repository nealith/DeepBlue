[gd_scene load_steps=11 format=2]

[ext_resource path="res://cockpit/dome/crack_generator.gd" type="Script" id=1]
[ext_resource path="res://blender_models/dome_cracking2.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

uniform sampler2D cracking;
uniform vec2 begin;
uniform sampler2D previous;
uniform bool extends_craking;
uniform int distance_i;

void fragment()
{
	vec4 color_tmp = vec4(0.0,0.0,0.0,0.0);
	//color_tmp.a = 1.0;
	
	
	//Apply correction to texture 
	vec2 uv2 = UV;
	
	
	vec2 begin_n = begin/1024.0;
	begin_n.y = 1.0 - begin_n.y;
	float dist = 1.0/1024.0;
	
	bool neightboor_is_white = false;
	
	/*
	for (float u = UV.x - 2.0*dist ; u <= UV.x + 2.0*dist ; u += dist)
	{
		for (float v = UV.y - 2.0*dist ; v <= UV.y + 2.0*dist ; v += dist)
		{
			if (u >= 0.0 && u <= 1.0 && v >= 0.0 && v <= 1.0){
				if (texture(previous,vec2(u,v)).r > 0.0){
					neightboor_is_white = true;
				}
			}
		}
	}*/
	
	if (uv2.x > begin_n.x){
		if (length(begin_n-uv2) <= float(distance_i)/1024.0){
			neightboor_is_white = true;
		}
	} else {
		if (length(begin_n-vec2(uv2.x+1.0,uv2.y)) <= float(distance_i)/1024.0){
			neightboor_is_white = true;
		}
	}
	
	
	
	
	if (neightboor_is_white && texture(cracking,uv2).r > 0.9 && texture(cracking,uv2).a > 0.9)
	{
		color_tmp = vec4(1.0,1.0,1.0,1.0);
	}
	
	COLOR = color_tmp;
}"

[sub_resource type="ViewportTexture" id=2]

viewport_path = NodePath("CrackPass")

[sub_resource type="ShaderMaterial" id=3]

resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/begin = Vector2( 696, 498 )
shader_param/extends_craking = null
shader_param/distance_i = null
shader_param/cracking = ExtResource( 2 )
shader_param/previous = SubResource( 2 )

[sub_resource type="ViewportTexture" id=4]

viewport_path = NodePath("CrackPass")

[sub_resource type="Shader" id=5]

code = "shader_type canvas_item;

float hash(float n) { return fract(sin(n) * 10000.0); }
float hash(vec2 p) { return fract(10000.0 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }

float noise(float x) {
    float i = floor(x);
    float f = fract(x);
    float u = f * f * (3.0 - 2.0 * f);
    return mix(hash(i), hash(i + 1.0), u);
}


float noise(vec2 x) {
    vec2 i = floor(x);
    vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));

    // Simple 2D lerp using smoothstep envelope between the values.
	// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),
	//			mix(c, d, smoothstep(0.0, 1.0, f.x)),
	//			smoothstep(0.0, 1.0, f.y)));

	// Same code, with the clamps in smoothstep and common subexpressions
	// optimized away.
    vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}


float noise(vec3 x) {
    vec3 step = vec3(110, 241, 171);

    vec3 i = floor(x);
    vec3 f = fract(x);
 
    // For performance, compute the base input to a 1D hash from the integer part of the argument and the 
    // incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

    vec3 u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}
/*

float fbm(float x) {
	float v = 0.0;
	float a = 0.5;
	float shift = float(100);
	for (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}


float fbm(vec2 x) {
	float v = 0.0;
	float a = 0.5;
	vec2 shift = vec2(100);
	// Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
	for (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {
		v += a * noise(x);
		x = rot * x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}


float fbm(vec3 x) {
	float v = 0.0;
	float a = 0.5;
	vec3 shift = vec3(100);
	for (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}*/

void fragment(){
	float v;
	
	v = noise(UV);
	
	COLOR = vec4(1.0,0.0,0.0,1.0) * v;
	
}"

[sub_resource type="ShaderMaterial" id=6]

shader = SubResource( 5 )

[sub_resource type="ViewportTexture" id=7]

viewport_path = NodePath("CrackPass")

[sub_resource type="ViewportTexture" id=8]

viewport_path = NodePath("CrackPass")

[node name="CrackGenerator" type="Spatial"]
script = ExtResource( 1 )

[node name="CrackPass" type="Viewport" parent="."]
size = Vector2( 1024, 1024 )
transparent_bg = true
hdr = false
disable_3d = true
usage = 0
render_target_update_mode = 3

[node name="TextureRect" type="TextureRect" parent="CrackPass"]
material = SubResource( 3 )
texture = SubResource( 4 )
stretch_mode = 4

[node name="Noise" type="Viewport" parent="."]
size = Vector2( 1024, 1024 )

[node name="TextureRect" type="TextureRect" parent="Noise"]
material = SubResource( 6 )
margin_right = 40.0
margin_bottom = 40.0
texture = SubResource( 7 )

[node name="Timer" type="Timer" parent="."]
wait_time = 0.02
autostart = true

[node name="Sprite3D" type="Sprite3D" parent="."]
visible = false
texture = SubResource( 8 )

[node name="InterpolatedCamera" type="InterpolatedCamera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4.58076 )
fov = 142.829

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
