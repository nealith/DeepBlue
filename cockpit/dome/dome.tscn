[gd_scene load_steps=11 format=2]

[ext_resource path="res://cockpit/dome.dae" type="PackedScene" id=1]
[ext_resource path="res://cockpit/dome/dome.gd" type="Script" id=2]
[ext_resource path="res://cockpit/dome/dome_cracking2.png" type="Texture" id=3]
[ext_resource path="res://PisteAudio/SFX/Glass-Break.ogg" type="AudioStream" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

render_mode cull_disabled;


uniform sampler2D cracking;
uniform sampler2D noise_dust;
uniform vec2 begin;
uniform int distance_i;

varying vec2 real_uv;

bool is_in_craking_texture(vec2 uv)
{
	 return(texture(cracking,uv).r > 0.9 && texture(cracking,uv).a > 0.9);
}

bool is_in_craking(vec2 uv, bool n)
{
	vec2 begin_n = begin/1024.0;
	begin_n.y = 1.0 - begin_n.y;

	bool neightboor_is_white = false;

	if (uv.x > begin_n.x){
		if (length(begin_n-uv) <= float(distance_i)/1024.0){
			neightboor_is_white = true;
		}
	} else {
		if (length(begin_n-vec2(uv.x+1.0,uv.y)) <= float(distance_i)/1024.0){
			neightboor_is_white = true;
		}
	}

	float d = 1.0/1024.0;
	bool is_crack = false;
	if (n){
		for (float x = uv.x - d ; x <= uv.x + d ; x+= d){
			for (float y = uv.y - d ; y <= uv.y + d ; y+= d){
				if (is_in_craking_texture(vec2(x,y))){
					is_crack = true;
				}
			}
		}
	} else {
		is_crack = is_in_craking_texture(uv);
	}

	return (neightboor_is_white && is_crack);

}

void vertex()
{
	float PI = 3.14159265359;

	real_uv = UV;

}

void fragment() {

	vec4 color_tmp = vec4(0.0);

	if (is_in_craking(real_uv,false))
	{
		color_tmp = vec4(1.0);
	}

	vec4 nd = texture(noise_dust,UV);

	ALBEDO = max(max(color_tmp.rgb,nd.rgb),vec3(0.1,0.6,0.8));
	ALPHA = max(max(color_tmp.a,nd.a*1.7),0.1);

}"

[sub_resource type="ViewportTexture" id=2]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
render_priority = 1
shader = SubResource( 1 )
shader_param/begin = Vector2( 690, 597 )
shader_param/distance_i = null
shader_param/cracking = ExtResource( 3 )
shader_param/noise_dust = SubResource( 2 )

[sub_resource type="SpatialMaterial" id=4]
resource_local_to_scene = true
next_pass = SubResource( 3 )
flags_transparent = true
flags_unshaded = true
params_blend_mode = 3
params_cull_mode = 2
params_depth_draw_mode = 1
albedo_color = Color( 1, 1, 1, 0.156863 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

vec3 hash(vec3 p) {
    p = vec3(dot(p, vec3(127.1, 311.7, 74.7)),
             dot(p, vec3(269.5, 183.3, 246.1)),
             dot(p, vec3(113.5, 271.9, 124.6)));

    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float noise(vec3 p) {
  vec3 i = floor(p);
  vec3 f = fract(p);
  vec3 u = f * f * (3.0 - 2.0 * f);

  return mix(mix(mix(dot(hash(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0)),
                     dot(hash(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),
                 mix(dot(hash(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)),
                     dot(hash(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),
             mix(mix(dot(hash(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)),
                     dot(hash(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),
                 mix(dot(hash(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)),
                     dot(hash(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z );
}

void fragment() {
    
	
	// creating a spherical texture : https://docs.godotengine.org/fi/latest/tutorials/viewports/using_viewport_as_texture.html

	float theta = UV.y * 3.14159;
	float phi = UV.x * 3.14159 * 2.0;
	vec3 unit = vec3(0.0, 0.0, 0.0);

	unit.x = sin(phi) * sin(theta);
	unit.y = cos(theta) * -1.0;
	unit.z = cos(phi) * sin(theta);
	unit = normalize(unit);
	
	// Algorythm from https://thebookofshaders.com/edit.php#11/lava-lamp.frag

	float DF = 0.0;

    // Add a random position
    vec3 vel = vec3(TIME*.1);
    DF += noise(unit+vel)*.25+.25;

	float t = 0.15*TIME;
	float coeff = abs(sin(t));

	float a = noise(unit*vec3(cos(t)*coeff,sin(t)*coeff,length(vec2(cos(t)*coeff,sin(t)*coeff))))*3.1415;
    
	vel = vec3(cos(a),sin(a),length(vec2(cos(a),sin(a))));
    DF += noise(unit+vel)*0.05+.45;

	float c = 1.0-smoothstep(.1,1.0,fract(DF));

	COLOR = vec4(c);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[node name="dome" index="0" instance=ExtResource( 1 )]
script = ExtResource( 2 )

[node name="Sphere" parent="." index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.0211585 )
material_override = SubResource( 4 )

[node name="Spot001" parent="." index="1"]
visible = false

[node name="InterpolatedCamera" type="InterpolatedCamera" parent="." index="3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2.13302 )
visible = false

[node name="Timer" type="Timer" parent="." index="4"]
wait_time = 0.01
autostart = true

[node name="Viewport" type="Viewport" parent="." index="5"]
size = Vector2( 2048, 1024 )
transparent_bg = true
msaa = 1
hdr = false
disable_3d = true
usage = 0

[node name="ColorRect" type="ColorRect" parent="Viewport" index="0"]
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CrackAudio" type="AudioStreamPlayer3D" parent="." index="6"]
stream = ExtResource( 4 )
unit_db = 80.0
unit_size = 33.1
bus = "Crack"
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
