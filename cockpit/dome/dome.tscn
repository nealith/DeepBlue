[gd_scene load_steps=6 format=2]

[ext_resource path="res://cockpit/dome.dae" type="PackedScene" id=1]
[ext_resource path="res://cockpit/dome/dome.gd" type="Script" id=2]
[ext_resource path="res://cockpit/dome/Glass.tres" type="Material" id=3]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

vec3 hash(vec3 p) {
    p = vec3(dot(p, vec3(127.1, 311.7, 74.7)),
             dot(p, vec3(269.5, 183.3, 246.1)),
             dot(p, vec3(113.5, 271.9, 124.6)));

    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float noise(vec3 p) {
  vec3 i = floor(p);
  vec3 f = fract(p);
  vec3 u = f * f * (3.0 - 2.0 * f);

  return mix(mix(mix(dot(hash(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0)),
                     dot(hash(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),
                 mix(dot(hash(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)),
                     dot(hash(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),
             mix(mix(dot(hash(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)),
                     dot(hash(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),
                 mix(dot(hash(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)),
                     dot(hash(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z );
}

void fragment() {
    	// --- noise 
	
	float theta = UV.y * 3.14159;
	float phi = UV.x * 3.14159 * 2.0;
	vec3 unit = vec3(0.0, 0.0, 0.0);
	
	unit.x = sin(phi) * sin(theta);
	unit.y = cos(theta) * -1.0;
	unit.z = cos(phi) * sin(theta);
	unit = normalize(unit);
	
	float DF = 0.0;

    // Add a random position
    float a = 0.0;
    vec3 vel = vec3(TIME*.1);
    DF += noise(unit+vel)*.25+.25;
	
	float time_dis = 0.15*TIME;
	float coeff = abs(sin(time_dis));
	float t = time_dis;
	float tt = acos(length(vec2(cos(t)*coeff,sin(t)*coeff)));
	
	a = noise(unit*vec3(cos(t)*coeff,sin(t)*coeff,sin(tt)))*3.1415;
	
	float aa = acos(length(vec2(cos(a)*coeff,sin(a)*coeff)));
    vel = vec3(cos(a)*coeff,sin(a)*coeff,sin(aa));
    DF += noise(unit+vel)*0.05+.45;
		
	float c = 1.0-smoothstep(.3,.9,fract(DF));
	
	COLOR = vec4(0.0,0.0, c, c);
}"

[sub_resource type="ShaderMaterial" id=2]

shader = SubResource( 1 )

[node name="dome" instance=ExtResource( 1 )]
script = ExtResource( 2 )

[node name="Sphere" parent="." index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.0211585 )
layers = 16384
material_override = ExtResource( 3 )

[node name="Spot001" parent="." index="1"]
visible = false

[node name="InterpolatedCamera" type="InterpolatedCamera" parent="." index="3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2.13302 )
visible = false

[node name="Timer" type="Timer" parent="." index="4"]
wait_time = 0.01
autostart = true

[node name="Viewport" type="Viewport" parent="." index="5"]
size = Vector2( 1024, 512 )
transparent_bg = true
hdr = false
disable_3d = true
usage = 0

[node name="ColorRect" type="ColorRect" parent="Viewport" index="0"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
